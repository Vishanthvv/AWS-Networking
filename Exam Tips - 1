if you need to go back and refresh anything that you might have missed throughout the chapter or lessons that might need to be reinforced by taking
another look or rewatching them. So if you're unsure about any of these topics, then go back and watch the videos go over the lessons a few more times.
So we started this chapter by talking about the AWS global infrastructure, and we need to make sure that we know the differences between regions,
availability zones and edge locations. 
Remember that a region is a geographic area in the world where AWS operates its cloud services, and these regions are separated from each other throughout 
the globe. Remember that regions are designed to be completely independent from one another and this provides fault isolation, fault tolerance and stability.
Remember that a region is composed of two or more availability zones and each of these availability zones are one or more data centers.
And remember that edge locations are used to deliver content to end users with low latency.
Remember that CloudFront uses edge locations and so does the AWS domain name system and Route 53,
make sure that you understand the global infrastructure of AWS as a whole, and make sure you understand what resources sit inside your VPC in AWS,
and sit outside your VPC in AWS. So you'll need to have a good grasp on public and private zones and the different services and where they sit within AWS.
Remember that private services sit within VPCs and other public services sit outside a VPC. Next, we talked about VPC and basic networking and with this,
we need to know how to create VPCs and the components of a VPC
and we need to know what is created by default. Remember,
whenever we create a VPC,
all we need to provide it is a name we need to provide a CIDR block range.
We need to provide a tenancy and this is dedicated or default and we also
have the option to create a VPC with a IPv6 CIDR range as well
and this is known as a dual stack.
So if a VPC is running an IPv4 and IPv6,
then this is known as dual stack mode.
So make sure you understand what needs to be considered when designing VPCs in
AWS,
you need to be able to understand what CIDR block ranges you need to create,
and you need to understand, okay, how do I map those to availability zones?
How do I map those to other VPCs and how many subnets am I going to have?
So this means that you'll need to understand how CIDR addressing works as well.
You'll also need to know the difference between IPv4 addressing and IPv6
addressing in terms of how AWS manages them.
Remember that a VPC must be created with an IPv4
addressing space, and you can optionally use IPv6,
but IPv6 is always going to be bounded by the amount of
IPv4 addresses available from the AWS pool and this is because every resource
within your VPC is assigned an IPv4 address there for IPv6
is bounded by Ipv4.
Remember that you can choose the CIDR block ranges for IPv4,
but AWS chooses the CIDR ranges for IPv6 and like I just stated
IPv6 addresses are bound by IPv4 addresses. Next,
we talked about subnets, VPC routers, and route tables,
and we need to understand how subnetting works.
We need to understand how to create subnets and we also need to understand the
implications of creating different sized subnets in different availability
zones. This means that we need to consider a few different things whenever we're
choosing our CIDR block range, for instance,
how many availability zones are in a specific region or how many tiers are we
using within our system?
Also remember that AWS reserves some of the IP addresses from your CIDR
range.
Remember the very first four addresses of any CIDR range and the very last
address of the CIDR range. So anytime you create a subnet,
you're always going to have five addresses that are reserved by AWS and remember
that one of the addresses or the .1 address is reserved for the VPC router also
known as the implicit router and this is the router that's within every
VPC that routes traffic dictated by route tables.
Speaking of route tables,
we need to know what the main route table is and what custom route tables are.
Remember that the main route table is going to be created whenever we create a
VPC and any subnets that we launch within that VPC are going to be
associated with the main route table.
Now it's best practice to create custom route tables for our subnets.
So we're able to route traffic appropriately, whether we want to have,
let's say public subnets or private subnets or VPN only subnets.
We need to understand how to create local,
static and dynamic routes within our route tables and we need to understand that
AWS predefines the route priority process to determine how to
route traffic. Now we know that there is a local route in our route table,
and this is going to be the most specific route.
It has the destination of the CIDR block range and a target of the local
route.
We know that our route tables have a local route that we're not able to edit or
remove this route,
helps us have intercommunication between our VPCs and helps the VPC
router know how to route traffic and this has the destination of the CIDR block
range for the VPC and a target of local. Next,
we talked about elastic network interfaces or ENIs,
and we need to know what ENIs are and what is associated with ENIs and
remember that ENS have a primary IPv4 private address, a Mac address,
and at least one security group ENIs can optionally have a second private
IPv4 address,
one or more elastic IP addresses one public IPv4 address,
and one or more IPv6 addresses.
Now remember that we can attach multiple ENIs to resources,
but you can never detach the primary ENI and from a resource that was created
whenever we well initially created the resource and understand the different
scenarios where multiple ENIs would be beneficial.
So having multiple elastic network interfaces allows us to use the network and
security applications within our VPC.
We can create dual homed instances where different workloads or different
roles are distinct to a specific subnet. Remember that elastic
network interfaces can be attached to running instances,
or they can be attached to instances that are stopped,
or they can be attached whenever you launch an instance and remember that
security groups are associated with ENIs and not the EC2 instances.
So whenever you create an EC2 instance,
you're really attaching the security group to the default primary ENI associated
with that instance when you launch it and remember that ENIs are confined to a
single availability zone,
meaning that whenever you create multiple ENIs that you want to attach to a
single instance, those ENIs have to be in the same availability zone.
So you can't attach two different ENIs that are in separate availability zones.
And finally remember that NIC teaming is not supported within AWS.
So you can't use this to increase bandwidth to your EC2 instances.
Next, we talked about elastic, IP addresses or EIP,
and we need to know what they are and how they differ from the public default IP
address that we assign whenever we create our EC2 instance,
or also known as the auto assigned IP address,
make sure that you remember that there's a one-to-one relationship between a
private IPv4 address and an elastic IP address and whenever you
create an elastic IP, you own that IP address,
unless you explicitly release that IP address back to AWS
and know what you are charged for whenever you are creating and using an elastic
IP address and make sure you know,
what you are charged for whenever you are using an elastic IP,
if you have an elastic IP and it's associated with an instance that's running,
then you're not charged for that elastic IP.
But if that instance is stopped or terminated,
you need to release that elastic IP back to AWS,
or you will be charged for it.
So AWS pretty much just doesn't want anybody to hog all the elastic IP
addresses. And if you do well, you'll be charged for them.
Next we talked about the internet gateway and we need to know what the internet
gateway is and the steps that we need to do to ensure that our subnets have
internet access, essentially making our subnets public.
Remember that an internet gateway is a traffic translator between public and
private IP addresses for our resources inside of our public subnets.
So as traffic comes into our internet gateway makes the mapping between public
and private IP addresses and vice versa whenever traffic is coming in or
leaving the VPC boundary.
We then dove into security groups and we need to know what security groups are
and how they are used well, for security,
remember that we can have multiple security groups and these can be associated
with our ENIs.
So we can have a total of five security groups by default attached to
a single ENIs. Remember that security groups only have allow rules,
but they don't have any deny rules.
There's an explicit deny rule built in to security groups.
So if you don't specify a rule, it's automatically going to deny it,
make sure you understand the difference between inbound rules,
outbound rules and default rules and remember that security groups are stateful,
meaning that if traffic is allowed in,
then the traffic is automatically allowed back out.
We also talked about network access control lists,
and we need to know what they are and how they're used for security.
Remember that NACLs are essentially just a firewall.
Remember that every subnet must be associated with a NACL and whenever we create
a VPC,
it creates a default network access control list and anysubnet that we launched
within that VPC is going to be assigned to that default NACL
unless we create a custom network access control list and assign it to the
subnet explicitly.
Remember that network access control lists operate at the subnet level,
meaning they're attached to a subnet and they evaluate traffic as it leaves,
or it comes into the subnet and NACLs have both allow and deny
rules.
And we need to understand how these rules work and how the numbering of rules
works as well. So the lowest rule number is evaluated first,
and then as the numbers increase, the rules are evaluated.
And when a match is found,
then a action is taken and this is either allow or deny.
Remember that NACLs are stateless,
meaning that we have to have explicit inbound or outbound rules,
depending on how we want to route remember that NACLs are stateless.
So that means that we must set inbound rules and outbound rules for traffic
coming in or leaving the subnet. It doesn't matter who initiated the traffic.
We need to create inbound and outbound rules separately.
So as a whole, we took a look at security groups and NACLs,
and we need to understand how to apply these to our VPC.
We need to be able to create complex structures with security groups within
different areas of our VPC.
So this might mean applying security groups with self referencing or applying
custom network access control lists to our subnets.
We need to start to think about, okay,
what areas do we need to access in our VPC?
And what areas do we not need to access?
Meaning what areas need to be public and what areas need to be private and be
able to understand how to diagnose network issues that could be caused by
security groups and network access control list.
Now we use flow logs to help us do this,
and we'll cover these in the exam tips in just a little while. Next,
we talked about NAT instances and we need to know what the limitations are for
NAT instances.
We need to understand the architectural decisions that need to be made for high
availability. If we're going to use NAT instances,
and we need to understand that we must disable the source and destination check
on our NAT instance or our EC2 instance,
that's running the NAT service so packets aren't dropped.
So we're allowed to use this NAT instance within our VPC.
We then talked about NAT gateways and these are going to be the recommended way
to perform that style architectures within our VPCs.
They are fully managed by AWS and NAT gateways are associated with an
availability zone. What it does is allows us to create availability zone,
independent architectures,
and we can create a NAT gateway in each of the availability zones.
So remember that both NAT gateways and NAT instances are added to our route
tables in the private subnets, directing inbound traffic to the internet.
So if we have a private subnet,
we would create a custom route table that would route traffic to the NAT gateway
or the NAT instance from there,
the net gateway or net instance would forward the traffic out to the internet.
And then the reverse would happen whenever the traffic was returned from the
internet. It would hit the NAT gateway first,
and then it would be directed to the private subnet or the private instance.
We then talked about VPC endpoints,
and we need to know what VPC endpoints are and how they've benefit our VPC
setup. So if we want to access some AWS services from within our VPC,
without having to traverse the internet,
we could use VPC endpoints to accomplish this.
We need to understand that there are two different types of VPC endpoints.
We have gateway VPC endpoints, and we also have interface VPC endpoints.
Now we only touched on gateway VPC endpoints and we'll touch on interface,
VPC endpoints later in this course. And right now,
S3 in DynamoDB are the only gateway endpoints that AWS provides
us. So just remember that next, we talked about VPC peering,
and we need to understand what VPC peering is and why it's important.
So within AWS VPCs are logically separate from each other,
meaning they have no communication with one another they're private, right?
So VPC peering allows us to make connections between two different VPCs.
Now, traditionally we would use software VPN applications in our VPCs,
but remember there are disadvantages to running this software within our VPC.
Remember that we would have to take into account high availability for our
software VPN applications,
and also the cost implications of spinning up software VPN applications.
So whenever we peer VPCs,
we can peer VPCs in the same account or between AWS accounts and these
accounts can be in the same region or different regions and remember,
whenever we create VPC peering connection,
the acceptor must accept the request from the well from the
requester. So there needs to be a handshake between the two VPC owners.
We'll also need to make sure we're able to set up our associated routes with our
route tables in our VPCs for VPC peering to work.
Both the acceptor and the requester we'll need to make route table entries into
their route tables for the VPC peering connection to work.
And always remember that transitive peering is not supported. And finally,
with VPC peering,
remember that we cannot create a peering connection between two VPCs
with overlapping or matching CIDR block ranges. Next,
we talked about ways to manage and troubleshoot our AWS networks using flow logs
and what flow logs do is aggregate all of the network traffic for a
specific thing, whether that's a VPC, a subnet or an ENI,
and remember it aggregates the metadata about the network traffic.
We need to make sure we can read flow logs and what type of information is
captured.
You can be certain that you're going to be asked on the exam to read a flow log
and try to diagnose what the networking issue might be.
So make sure you understand how to read them and all of the information
associated with the flow log and flow logs are not captured in real time.
There's going to be some delay as it aggregates the networking traffic and it
also brings up another point that VPC flow logs are not a packet capturing tool
like Wireshark. If you've ever used it,
they captured the metadata about network traffic and the last thing to remember
about flow logs is that whenever you have a secondary IP address,
that's on an ENI and is used as the destination,
then the logs are going to capture the primary IP address of the interface.
So within our VPC flow logs,
you'll never see public IP addresses for your resources within your VPC.
You'll always see the private IP address associated with the ENI that's,
what's going to be in the flow log and if you have a secondary IP address,
just like this point states,
you're going to see the primary IP address of the source or the destination
of whatever the ENI is attached to.
We then talked about network performance,
and we talked about the different options that we have for launching high
performance computing workloads in AWS.
Remember we have the option of beefing up our instances by using instance types
that are supported for enhanced networking.
We have the option of spinning up our instances on similar hardware or hardware
that's close together by using cluster placement groups.
This essentially launches our instances all in the same availability zone and we
also could take advantage of not only enhanced networking,
but also jumbo frames, right?
So we need to make sure we understand what enhanced networking is and how we can
enable it on certain instance types.
Make sure you understand what instance types are supported and which instant
types you can use for enhanced networking.
We need to make sure we understand what cluster placement groups are.
These are going to be the most important type of placement groups that we can
use for our high performance computing workloads,
because remember it puts all of our instances in the same availability zone.
So they're closer together.
Therefore we can have higher throughput whenever they're communicating with each
other and remember, if we do take advantage of enhanced networking,
then we can also take advantage of the 9001 maximum transfer units
or the non thousand one bytes per packet that we can send
between our networking components but just remember that if it does,
but just remember that if the packets do traverse the internet or leave our VPC,
then they're going to be fragmented down, back down to the 1500 MTU.
So just keep that in mind.
So that is it for the exam tips for this chapter and hopefully you learned a
little bit about designing and implementing AWS networks. Now,
if you have any questions and please make sure you post in the course forum and
we'll answer them to the best of our knowledge.
So thanks everyone for joining me throughout this chapter.
And when you're ready, then let's go ahead and move on.
